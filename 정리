1. 실행속도높이기
	1) BufferedReader
		헤더: 
			import java.io.BufferedReader;
			import java.io.InputStreamReader;
		선언: 
			BufferedReader br = 
				new BufferedReader(new InputStreamReader(System.in));
		메소드
			readLine: 그 줄 읽기
			정수변환방법: Integer.parseInt()
		예시
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int N = Integer.parseInt(br.readLine());
			
		***
		1. 라인에 숫자가 하나만 있는 경우 ex) 1
			int N = Integer.parseInt(br.readLine());
			
		2. 라인에 숫자가 여러개 있는데 공백으로 구분되어있는 경우 ex) 1 2 3
			StringTokenizer st = new StringTokenizer(br.readline());
			for(int i = 0; i < N; ++i) {
				arr[i] = Integer.parseInt(st.nextToken());
			}
			
		3. 라인에 숫자가 여러개 있는데 연속으로 나오는 경우 ex) 12345 // String으로 받아서 charAt
			//배열에 담기 (char -> int)
			String s = br.readLine();
			int[] arr = new int[s.length()];
			for(int i = 0; i < s.length; ++i) {
				arr[i] = s.charAt(i) - '0';
			}

			// 연속적인 숫자의 경우
			String s = br.readLine();
			for(int i = 0; i < s.length; ++i) {
				System.out.println(s.charAt(i));
			}

	3) StringTokenizer: 한줄에 공백을 구분자로 여러 문자 있는 경우
		헤더
			import java.util.StringTokenizer;
		선언
			StringTokenizer st = new StringTokenizer(br.readLine(), " "); //공백으로 구분
			int N = Integer.parseInt(st.nextToken());
			
		메소드
			nextToken : 다음 토큰 반환
			hasMoreTokens : 토큰 남아있는지
			countTokens : 전체 토큰의 수
			
				
	2) BufferedWriter
		헤더:
			import java.io.BufferedWriter;
			import java.io.OutputStreamWriter;
		선언: 	
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		메소드
			write : 출력값을 버퍼에 저장 (ex) bw.write(st + "\n") 
			flush : 출력
			newLine : 줄바꿈
		주의점
			출력시 String으로 바꿔서 출력해야함.
			ex) bw.write(String.valueOf(n));
			
	4) StringBuilder
		메소드
			append: 값 하나씩 추가하기 
			insert
			delete
			setLength : 길이 자르기 
				ex) 마지막 문자 제거 : sb.setLength(sb.length() -1)
			toString

STRING
	메서드
		split(' ') : 구분해서 배열로 저장
1. STACK
	메소드
		pop : 값 뺴기
		peek: top 반환하기(뺴지는 앟기)
		isEmpty
		size
		push : 값 넣기

2. QUEUE
	헤더:
		import java.util.LinkedList;
		import java.util.Queue;
	선언
		 Queue<Integer> queue = new LinkedList<>();
	메소드
		isEmpty: 비어있는지
		peek: 
		add: 값 추가 (성공시 true, 공간 없어 실패하면 exceptipon)
		offer: 값 추가(실패시 false)
		poll: 첫번쨰값 반환하고 제거, 비어있으면 null
		isEmpty
		remove: 첫번째값 제거
		clear: 초기화
		peek: 첫번째값 참조
	
3. HashMap
	선언
		HashMap<String,String> map2 = new HashMap<>(); //new에서 타입 파라미터 생략가능
		HashMap<String,String> map3 = new HashMap<>(map1); //map1의 모든 값을 가진 HashMap생성
		HashMap<String,String> map4 = new HashMap<>(10); //초기 용량(capacity)지정
		HashMap<String,String> map5 = new HashMap<>(10, 0.7f); //초기 capacity,load factor지정
		HashMap<String,String> map6 = new HashMap<String,String>(){{ //초기값 지정
		    put("a","b");
		}};
	메서드
		put(_, _) : 값 추가
		remove(_) : 값 제거
		clear: 모든값 제거
		get(key) : key값의 value
		keySet : (리턴타입) set<String> keys
		containsKey
		containsValue
		size : 크기 
		for (Entry<Integer, String> entry : map.entrySet()) {
    		System.out.println("[Key]:" + entry.getKey() + " [Value]:" + entry.getValue());
		}
		
		for(Integer i : map.keySet()){ //저장된 key값 확인
    		System.out.println("[Key]:" + i + " [Value]:" + map.get(i));
		}
		
4. List
	메소드
		add(value) : 특정 값 넣기
		add(index, value) : index 값에 특정 값 넣기
		
		size : 리스트 크기
		get(index) : index에 위치한 value 가져오기
		indexof(value) : value가 어느 위치에 있는지 가져오기
		contains(value) : value 가지고 있니? true/false
		isEmpty() : 비어있니? true/false
		
		set(index, val) : 값 수정
		
		remove(index/val) : 값 삭제
		clear : 전체 삭제
		removeif 
	참고
		https://goodteacher.tistory.com/281
		
5. HashSet
	선언
		Set<String> set = new HashSet<>(); 
	메소드
		add(val) : 값 추가( 순서 없고 중복 허용X)
		size: 크기
		isEmpty: 비어있는지
		contains(val) : 값 가지고 있는지
		remove : 값 삭제 
		clear : 다 삭제
	기타-값 출력
		(방법1)
		for(String str : set) 
			System.out.println(str);
		
		(방법2)
		Iterator<String> iter = set.iterator(); 
		while(iter.hasNext()) 
			System.out.println(iter.next());

ITERATOR
: 자바 컬렉션 프레임웍에서 컬렉션에 저장되어있는 요소를 읽어오는 방법
	public interface Iterator {
		boolean hasNext(); //읽어올 요소가 남아있는지
		Object next(); //
		void remove(); //next로 읽어온 요소 삭제
	}


BIGINTEGER
*** BJ_2407_조합

 	BigInteger bigNum1 = BigInteger.ZERO;  // 0
    BigInteger bigNum2 = BigInteger.ONE;   // 1
    BigInteger bigNum3 = BigInteger.TEN;   // 10
    BigInteger afterBigNum;
 
 
    // 사칙연산
    afterBigNum = bigNum1.add(bigNum3);        // 더하기
    afterBigNum = bigNum3.subtract(bigNum2);    // 빼기
    afterBigNum = bigNum2.multiply(bigNum3);    // 곱하기
    afterBigNum = bigNum3.divide(bigNum2);        // 나누기
 
 
    // 변수와 사칙연산
    afterBigNum = bigNum1.add(BigInteger.valueOf(i));        // 더하기
    afterBigNum = bigNum1.subtract(BigInteger.valueOf(i));    // 빼기
    afterBigNum = bigNum1.multiply(BigInteger.valueOf(i));    // 곱하기
    afterBigNum = bigNum1.divide(BigInteger.valueOf(i));    // 나누기




		